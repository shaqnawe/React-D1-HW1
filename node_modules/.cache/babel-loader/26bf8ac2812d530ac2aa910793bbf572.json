{"ast":null,"code":"var _jsxFileName = \"/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/AuthProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport { browserLocalPersistence, getAuth, GoogleAuthProvider, onAuthStateChanged, setPersistence, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, setDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // to make your own React Hook\n\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState({\n    loggedIn: false\n  });\n  let auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  const db = getFirestore;\n\n  const signIn = () => {\n    return setPersistence(auth, browserLocalPersistence).then(() => {\n      signInWithPopup(auth, provider).then(result => {\n        console.log(result);\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const logOut = () => {\n    signOut(auth).then(() => {\n      setCurrentUser({\n        loggedIn: false\n      });\n      console.log('User logged out successfully');\n    });\n  };\n\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        // once the user logs in, we need to add them to the database as a reference\n        // query the users collection to find the user\n        const useRef = doc(db, 'users', user.uid); // if that user doesn't exist, add them to the database\n        // otherwise, if the user does exist, overwrite (don't duplicate) their information\n\n        setDoc(useRef, {\n          email: user.email,\n          name: user.displayName\n        }, {\n          merge: true\n        });\n        setCurrentUser({\n          id: user.uid,\n          name: user.displayName,\n          image: user.photoURL,\n          email: user.email,\n          loggedIn: true\n        });\n      }\n    });\n  }, [auth]);\n  const values = {\n    signIn,\n    currentUser,\n    logOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(AuthProvider, \"2bTO6xhbyu21yGNDed9VuG/s7sg=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/AuthProvider.js"],"names":["createContext","useState","useEffect","useContext","browserLocalPersistence","getAuth","GoogleAuthProvider","onAuthStateChanged","setPersistence","signInWithPopup","signOut","getFirestore","setDoc","AuthContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loggedIn","auth","provider","db","signIn","then","result","console","log","catch","err","logOut","user","useRef","doc","uid","email","name","displayName","merge","id","image","photoURL","values"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,uBAAT,EAAkCC,OAAlC,EAA2CC,kBAA3C,EAA+DC,kBAA/D,EAAmFC,cAAnF,EAAmGC,eAAnG,EAAoHC,OAApH,QAAmI,eAAnI;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,oBAArC;;AAGA,OAAO,MAAMC,WAAW,gBAAGb,aAAa,EAAjC,C,CAEP;;AACA,OAAO,SAASc,OAAT,GAAmB;AAAA;;AACtB,SAAOX,UAAU,CAAEU,WAAF,CAAjB;AACH;;GAFeC,O;;AAIhB,MAAMC,YAAY,GAAG,QAAoB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAErC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAE;AAAEkB,IAAAA,QAAQ,EAAE;AAAZ,GAAF,CAA9C;AACA,MAAIC,IAAI,GAAGf,OAAO,EAAlB;AACA,QAAMgB,QAAQ,GAAG,IAAIf,kBAAJ,EAAjB;AACA,QAAMgB,EAAE,GAAGX,YAAX;;AACA,QAAMY,MAAM,GAAG,MAAM;AACjB,WAAOf,cAAc,CAAEY,IAAF,EAAQhB,uBAAR,CAAd,CACEoB,IADF,CACS,MAAM;AACVf,MAAAA,eAAe,CAAEW,IAAF,EAAQC,QAAR,CAAf,CACKG,IADL,CACWC,MAAM,IAAI;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAaF,MAAb;AACH,OAHL;AAIH,KANF,EAOEG,KAPF,CAOSC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAaE,GAAb,CAPhB,CAAP;AAQH,GATD;;AAUA,QAAMC,MAAM,GAAG,MAAM;AACjBpB,IAAAA,OAAO,CAAEU,IAAF,CAAP,CACKI,IADL,CACW,MAAM;AACTN,MAAAA,cAAc,CAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAF,CAAd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,KAJL;AAKH,GAND;;AAOAzB,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,kBAAkB,CAACa,IAAD,EAAQW,IAAD,IAAU;AACjC,UAAIA,IAAJ,EAAU;AACN;AACA;AACA,cAAMC,MAAM,GAAGC,GAAG,CAAEX,EAAF,EAAM,OAAN,EAAeS,IAAI,CAACG,GAApB,CAAlB,CAHM,CAIN;AACA;;AACAtB,QAAAA,MAAM,CAAEoB,MAAF,EAAU;AAAEG,UAAAA,KAAK,EAAEJ,IAAI,CAACI,KAAd;AAAqBC,UAAAA,IAAI,EAAEL,IAAI,CAACM;AAAhC,SAAV,EAAwD;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAxD,CAAN;AACFpB,QAAAA,cAAc,CAAC;AACbqB,UAAAA,EAAE,EAAER,IAAI,CAACG,GADI;AAEbE,UAAAA,IAAI,EAAEL,IAAI,CAACM,WAFE;AAGbG,UAAAA,KAAK,EAAET,IAAI,CAACU,QAHC;AAIbN,UAAAA,KAAK,EAAEJ,IAAI,CAACI,KAJC;AAKbhB,UAAAA,QAAQ,EAAE;AALG,SAAD,CAAd;AAOD;AACF,KAhBiB,CAAlB;AAiBD,GAlBQ,EAkBN,CAAEC,IAAF,CAlBM,CAAT;AAoBA,QAAMsB,MAAM,GAAG;AACXnB,IAAAA,MADW;AACHN,IAAAA,WADG;AACUa,IAAAA;AADV,GAAf;AAGA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEY,MAA7B;AAAA,cACK1B;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnDD;;IAAMD,Y;;KAAAA,Y;AAqDN,eAAeA,YAAf","sourcesContent":["import { createContext, useState, useEffect, useContext } from \"react\";\nimport { browserLocalPersistence, getAuth ,GoogleAuthProvider, onAuthStateChanged, setPersistence, signInWithPopup, signOut } from \"firebase/auth\";\nimport { getFirestore, setDoc } from \"firebase/firestore\";\n\n\nexport const AuthContext = createContext()\n\n// to make your own React Hook\nexport function useAuth() {\n    return useContext( AuthContext )\n}\n\nconst AuthProvider = ( { children } ) => {\n\n    const [currentUser, setCurrentUser] = useState( { loggedIn: false } )\n    let auth = getAuth();\n    const provider = new GoogleAuthProvider();\n    const db = getFirestore\n    const signIn = () => {\n        return setPersistence( auth, browserLocalPersistence )\n                .then ( () => {\n                    signInWithPopup( auth, provider)\n                        .then( result => {\n                            console.log( result )\n                        })\n                })\n                .catch( err => console.log( err ))\n    }\n    const logOut = () => {\n        signOut( auth )\n            .then( () => {\n                setCurrentUser( { loggedIn: false } )\n                console.log('User logged out successfully')\n            } )\n    }\n    useEffect(() => {\n      onAuthStateChanged(auth, (user) => {\n        if (user) {\n            // once the user logs in, we need to add them to the database as a reference\n            // query the users collection to find the user\n            const useRef = doc( db, 'users', user.uid)\n            // if that user doesn't exist, add them to the database\n            // otherwise, if the user does exist, overwrite (don't duplicate) their information\n            setDoc( useRef, { email: user.email, name: user.displayName}, { merge: true } )\n          setCurrentUser({\n            id: user.uid,\n            name: user.displayName,\n            image: user.photoURL,\n            email: user.email,\n            loggedIn: true\n          });\n        }\n      });\n    }, [ auth ]);\n    \n    const values = {\n        signIn, currentUser, logOut\n    }\n    return (\n        <AuthContext.Provider value={values}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}