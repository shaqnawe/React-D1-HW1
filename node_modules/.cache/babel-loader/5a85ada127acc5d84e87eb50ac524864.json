{"ast":null,"code":"var _jsxFileName = \"/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/AuthProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport { browserLocalPersistence, getAuth, GoogleAuthProvider, onAuthStateChanged, setPersistence, signInWithPopup, createUserWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, setDoc, doc } from \"firebase/firestore\"; // import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // to make your own React Hook\n\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState({\n    loggedIn: false\n  });\n  const [loading, setLoading] = useState(false);\n  let auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  const db = getFirestore();\n\n  const signIn = () => {\n    return setPersistence(auth, browserLocalPersistence).then(() => {\n      signInWithPopup(auth, provider).then(result => {\n        console.log(result);\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const signup = (email, password) => {\n    return auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  const logOut = () => {\n    signOut(auth).then(() => {\n      setCurrentUser({\n        loggedIn: false\n      });\n      console.log('User logged out successfully');\n    });\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        // once the user logs in, we need to add them to the database as a reference\n        // query the users collection to find the user\n        const useRef = doc(db, 'users', user.uid); // if that user doesn't exist, add them to the database\n        // otherwise, if the user does exist, overwrite (don't duplicate) their information\n\n        setDoc(useRef, {\n          email: user.email,\n          name: user.displayName\n        }, {\n          merge: true\n        });\n        setCurrentUser({\n          id: user.uid,\n          name: user.displayName,\n          image: user.photoURL,\n          email: user.email,\n          loggedIn: true\n        });\n        setLoading(true);\n        return unsubscribe;\n      }\n    });\n  }, [auth, db]);\n  const values = {\n    signIn,\n    currentUser,\n    logOut,\n    signup\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: values,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(AuthProvider, \"5XqzuQ1lSXj44ElFSVUNuDlNpL0=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/AuthProvider.js"],"names":["createContext","useState","useEffect","useContext","browserLocalPersistence","getAuth","GoogleAuthProvider","onAuthStateChanged","setPersistence","signInWithPopup","createUserWithEmailAndPassword","signOut","getFirestore","setDoc","doc","AuthContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loggedIn","loading","setLoading","auth","provider","db","signIn","then","result","console","log","catch","err","signup","email","password","logOut","unsubscribe","user","useRef","uid","name","displayName","merge","id","image","photoURL","values"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect, useContext } from \"react\";\nimport {\n  browserLocalPersistence,\n  getAuth,\n  GoogleAuthProvider,\n  onAuthStateChanged,\n  setPersistence,\n  signInWithPopup,\n  createUserWithEmailAndPassword,\n  signOut,\n} from \"firebase/auth\";\nimport { getFirestore, setDoc, doc } from \"firebase/firestore\";\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n\nexport const AuthContext = createContext()\n\n// to make your own React Hook\nexport function useAuth() {\n    return useContext( AuthContext )\n}\n\nconst AuthProvider = ( { children } ) => {\n\n    const [currentUser, setCurrentUser] = useState( { loggedIn: false } )\n    const [loading, setLoading] = useState(false)\n    let auth = getAuth();\n    const provider = new GoogleAuthProvider();\n    const db = getFirestore()\n    const signIn = () => {\n        return setPersistence( auth, browserLocalPersistence )\n                .then ( () => {\n                    signInWithPopup( auth, provider)\n                        .then( result => {\n                            console.log( result )\n                        })\n                })\n                .catch( err => console.log( err ))\n    }\n    const signup = (email, password) => {\n        return auth.createUserWithEmailAndPassword(email, password)\n    }\n    const logOut = () => {\n        signOut( auth )\n            .then( () => {\n                setCurrentUser( { loggedIn: false } )\n                console.log('User logged out successfully')\n            } )\n    }\n    useEffect(() => {\n      const unsubscribe = onAuthStateChanged(auth, (user) => {\n        if (user) {\n            // once the user logs in, we need to add them to the database as a reference\n            // query the users collection to find the user\n            const useRef = doc( db, 'users', user.uid)\n            // if that user doesn't exist, add them to the database\n            // otherwise, if the user does exist, overwrite (don't duplicate) their information\n            setDoc( useRef, { email: user.email, name: user.displayName}, { merge: true } )\n            setCurrentUser({\n                id: user.uid,\n                name: user.displayName,\n                image: user.photoURL,\n                email: user.email,\n                loggedIn: true\n            });\n            setLoading(true)\n          return unsubscribe\n        }\n      });\n    }, [ auth, db ]);\n    \n    const values = {\n      signIn,\n      currentUser,\n      logOut,\n      signup\n    };\n    return (\n        <AuthContext.Provider value={values}>\n            {!loading && children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}