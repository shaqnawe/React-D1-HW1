{"ast":null,"code":"var _jsxFileName = \"/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/DataProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { firebaseApp } from '../firebase/config';\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { collection, collectionGroup, addDoc, getDoc, getDocs, query, getFirestore } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext(); // To make your own React hook\n\nexport function useData() {\n  _s();\n\n  return useContext(DataContext);\n}\n\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst DataProvider = props => {\n  _s2();\n\n  const [posts, setPosts] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [sent, setSent] = useState([]);\n  const {\n    currentUser,\n    send\n  } = useAuth;\n  let userEmail;\n  const db = getFirestore();\n  const getMessages = useCallback(async () => {\n    const q = query(collectionGroup(db, \"messages\"));\n    let newMessages = [];\n    const querySnapshot = await getDocs(q);\n    querySnapshot.forEach(async doc => {\n      const userRef = await getDoc(doc.ref.parent.parent);\n      newMessages.push({\n        id: doc.id,\n        ...doc.data(),\n        user: { ...userRef.data()\n        }\n      });\n      setMessages(newMessages);\n    });\n    return querySnapshot;\n  }, [db]);\n  const getSent = useCallback(async () => {\n    const q = query(collectionGroup(db, 'sent'));\n    let updatedSent = [];\n    const querySnapshot = await getDocs(q);\n    querySnapshot.forEach(async doc => {\n      const userRef = await getDoc(doc.ref.parent.parent);\n      userEmail = userRef.data().email;\n      updatedSent.push({\n        id: doc.id,\n        ...doc.data(),\n        user: userEmail\n      });\n      setSent(updatedSent);\n      console.log(userEmail);\n    });\n    return querySnapshot;\n  }, [db]);\n\n  const sendEmail = async emailData => {\n    let collectionRef = await collection(db, `users/${currentUser.id}/sent`);\n    const docRef = await addDoc(collectionRef, emailData);\n    const newDoc = await getDoc(docRef);\n    const userRef = await getDoc(docRef.parent.parent);\n    setPosts([{\n      id: newDoc.id,\n      ...newDoc.data(),\n      user: { ...userRef.data()\n      }\n    }, ...posts]);\n  };\n\n  useEffect(() => {\n    axios.get(`https://fakebook-january-derek.herokuapp.com/api/v1/blog`).then(res => setPosts(res.data));\n    getMessages();\n    getSent();\n  }, [getMessages, getSent]);\n  const values = {\n    posts: posts,\n    messages: messages,\n    sent: sent,\n    userEmail: userEmail\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: values,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(DataProvider, \"9wEmEESutp2YweWVVqneTuiGxcw=\");\n\n_c = DataProvider;\nexport default DataProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"sources":["/Users/shaktishah/Desktop/Coding Temple/2022/week_07/01/hw1/src/contexts/DataProvider.js"],"names":["React","createContext","useContext","useEffect","useState","useCallback","axios","firebaseApp","useAuth","collection","collectionGroup","addDoc","getDoc","getDocs","query","getFirestore","DataContext","useData","DataProvider","props","posts","setPosts","messages","setMessages","sent","setSent","currentUser","send","userEmail","db","getMessages","q","newMessages","querySnapshot","forEach","doc","userRef","ref","parent","push","id","data","user","getSent","updatedSent","email","console","log","sendEmail","emailData","collectionRef","docRef","newDoc","get","then","res","values","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,EAAgEC,WAAhE,QAAmF,OAAnF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,UAAT,EACEC,eADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,KALF,EAMEC,YANF,QAOO,oBAPP;;AASA,OAAO,MAAMC,WAAW,gBAAGf,aAAa,EAAjC,C,CAEP;;AACA,OAAO,SAASgB,OAAT,GAAmB;AAAA;;AACtB,SAAOf,UAAU,CAAEc,WAAF,CAAjB;AACH;;GAFeC,O;;AAIhB,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEsB,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAwBnB,OAA9B;AACA,MAAIoB,SAAJ;AAEA,QAAMC,EAAE,GAAGd,YAAY,EAAvB;AAEA,QAAMe,WAAW,GAAGzB,WAAW,CAC3B,YAAY;AAER,UAAM0B,CAAC,GAAGjB,KAAK,CAAEJ,eAAe,CAACmB,EAAD,EAAK,UAAL,CAAjB,CAAf;AAEA,QAAIG,WAAW,GAAG,EAAlB;AAEA,UAAMC,aAAa,GAAG,MAAMpB,OAAO,CAAEkB,CAAF,CAAnC;AAEAE,IAAAA,aAAa,CAACC,OAAd,CAAuB,MAAMC,GAAN,IAAa;AAChC,YAAMC,OAAO,GAAG,MAAMxB,MAAM,CAACuB,GAAG,CAACE,GAAJ,CAAQC,MAAR,CAAeA,MAAhB,CAA5B;AAEAN,MAAAA,WAAW,CAACO,IAAZ,CAAiB;AACfC,QAAAA,EAAE,EAAEL,GAAG,CAACK,EADO;AAEf,WAAGL,GAAG,CAACM,IAAJ,EAFY;AAGfC,QAAAA,IAAI,EAAE,EAAE,GAAGN,OAAO,CAACK,IAAR;AAAL;AAHS,OAAjB;AAKAlB,MAAAA,WAAW,CAAES,WAAF,CAAX;AACH,KATD;AAUA,WAAOC,aAAP;AACH,GApB0B,EAqB3B,CAACJ,EAAD,CArB2B,CAA/B;AAuBA,QAAMc,OAAO,GAAGtC,WAAW,CACvB,YAAY;AACR,UAAM0B,CAAC,GAAGjB,KAAK,CAAEJ,eAAe,CAACmB,EAAD,EAAK,MAAL,CAAjB,CAAf;AAEA,QAAIe,WAAW,GAAG,EAAlB;AACA,UAAMX,aAAa,GAAG,MAAMpB,OAAO,CAAEkB,CAAF,CAAnC;AAEAE,IAAAA,aAAa,CAACC,OAAd,CAAuB,MAAMC,GAAN,IAAa;AAChC,YAAMC,OAAO,GAAG,MAAMxB,MAAM,CAACuB,GAAG,CAACE,GAAJ,CAAQC,MAAR,CAAeA,MAAhB,CAA5B;AACAV,MAAAA,SAAS,GAAGQ,OAAO,CAACK,IAAR,GAAeI,KAA3B;AAEAD,MAAAA,WAAW,CAACL,IAAZ,CAAiB;AACbC,QAAAA,EAAE,EAAEL,GAAG,CAACK,EADK;AAEb,WAAGL,GAAG,CAACM,IAAJ,EAFU;AAGbC,QAAAA,IAAI,EAAEd;AAHO,OAAjB;AAKAH,MAAAA,OAAO,CAAEmB,WAAF,CAAP;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ;AACH,KAXD;AAYA,WAAOK,aAAP;AACH,GApBsB,EAqBvB,CAACJ,EAAD,CArBuB,CAA3B;;AAwBA,QAAMmB,SAAS,GAAG,MAAOC,SAAP,IAAqB;AACrC,QAAIC,aAAa,GAAG,MAAMzC,UAAU,CAACoB,EAAD,EAAM,SAAQH,WAAW,CAACc,EAAG,OAA7B,CAApC;AACA,UAAMW,MAAM,GAAG,MAAMxC,MAAM,CAACuC,aAAD,EAAgBD,SAAhB,CAA3B;AACA,UAAMG,MAAM,GAAG,MAAMxC,MAAM,CAACuC,MAAD,CAA3B;AACA,UAAMf,OAAO,GAAG,MAAMxB,MAAM,CAACuC,MAAM,CAACb,MAAP,CAAcA,MAAf,CAA5B;AACAjB,IAAAA,QAAQ,CAAC,CACP;AAAEmB,MAAAA,EAAE,EAAEY,MAAM,CAACZ,EAAb;AAAiB,SAAGY,MAAM,CAACX,IAAP,EAApB;AAAmCC,MAAAA,IAAI,EAAE,EAAE,GAAGN,OAAO,CAACK,IAAR;AAAL;AAAzC,KADO,EAEP,GAAGrB,KAFI,CAAD,CAAR;AAID,GATD;;AAWAjB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CACF+C,GADH,CACQ,0DADR,EAEGC,IAFH,CAESC,GAAD,IAASlC,QAAQ,CAACkC,GAAG,CAACd,IAAL,CAFzB;AAGEX,IAAAA,WAAW;AACXa,IAAAA,OAAO;AACV,GANQ,EAMN,CAAEb,WAAF,EAAea,OAAf,CANM,CAAT;AASA,QAAMa,MAAM,GAAG;AACbpC,IAAAA,KAAK,EAAEA,KADM;AAEbE,IAAAA,QAAQ,EAAEA,QAFG;AAGbE,IAAAA,IAAI,EAAEA,IAHO;AAIbI,IAAAA,SAAS,EAAEA;AAJE,GAAf;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAK4B,MAAhC;AAAA,cACKrC,KAAK,CAACsC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAzFD;;IAAMvC,Y;;KAAAA,Y;AA2FN,eAAeA,YAAf","sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { firebaseApp } from '../firebase/config';\nimport { useAuth } from \"../contexts/AuthProvider\";\nimport { collection,\n  collectionGroup,\n  addDoc,\n  getDoc,\n  getDocs,\n  query,\n  getFirestore\n} from \"firebase/firestore\";\n\nexport const DataContext = createContext()\n\n// To make your own React hook\nexport function useData() {\n    return useContext( DataContext )\n}\n\nconst DataProvider = (props) => {\n    \n    const [posts, setPosts] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [sent, setSent] = useState([]);\n    const { currentUser, send } = useAuth;\n    let userEmail;\n\n    const db = getFirestore()\n\n    const getMessages = useCallback(\n        async () => {\n\n            const q = query( collectionGroup(db, \"messages\") );\n\n            let newMessages = [];\n\n            const querySnapshot = await getDocs( q )\n\n            querySnapshot.forEach( async doc => {\n                const userRef = await getDoc(doc.ref.parent.parent);\n\n                newMessages.push({\n                  id: doc.id,\n                  ...doc.data(),\n                  user: { ...userRef.data() },\n                });\n                setMessages( newMessages )\n            })\n            return querySnapshot;\n        },\n        [db]\n    )\n    const getSent = useCallback(\n        async () => {\n            const q = query( collectionGroup(db, 'sent') )\n\n            let updatedSent = [];\n            const querySnapshot = await getDocs( q );\n\n            querySnapshot.forEach( async doc => {\n                const userRef = await getDoc(doc.ref.parent.parent);\n                userEmail = userRef.data().email;\n\n                updatedSent.push({\n                    id: doc.id,\n                    ...doc.data(),\n                    user: userEmail\n                });\n                setSent( updatedSent )\n                console.log(userEmail);\n            })\n            return querySnapshot;\n        },\n        [db]\n    );\n\n    const sendEmail = async (emailData) => {\n      let collectionRef = await collection(db, `users/${currentUser.id}/sent`);\n      const docRef = await addDoc(collectionRef, emailData);\n      const newDoc = await getDoc(docRef);\n      const userRef = await getDoc(docRef.parent.parent);\n      setPosts([\n        { id: newDoc.id, ...newDoc.data(), user: { ...userRef.data() } },\n        ...posts,\n      ]);\n    };\n    \n    useEffect(() => {\n      axios\n        .get(`https://fakebook-january-derek.herokuapp.com/api/v1/blog`)\n        .then((res) => setPosts(res.data));\n        getMessages();\n        getSent();\n    }, [ getMessages, getSent ]);\n\n    \n    const values = {\n      posts: posts,\n      messages: messages,\n      sent: sent,\n      userEmail: userEmail\n    };\n\n    return (\n        <DataContext.Provider value = { values }>\n            {props.children}\n        </DataContext.Provider>\n    )\n}\n\nexport default DataProvider;"]},"metadata":{},"sourceType":"module"}